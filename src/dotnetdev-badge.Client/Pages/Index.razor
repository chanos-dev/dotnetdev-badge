@page "/"
@using MudBlazor

<MudGrid>
    <MudItem xs="6">
        <MudTextField @bind-Value="_id" Counter="20" MaxLength="20" Immediate="true" Label=".NET Dev ID" Variant="Variant.Outlined" Clearable="true" />
    </MudItem>
    <MudItem xs="6">
        <MudField Label="Badge Theme" Variant="Variant.Text" InnerPadding="false" DisableUnderLine="true">
            <MudRadioGroup @bind-Value="_theme">
                <MudRadio Value="@("Light")">Light</MudRadio>
                <MudRadio Value="@("Dark")">Dark</MudRadio>
                <MudRadio Value="@("Dotnet")">Dotnet</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick=OnGenerateBadge>Generate</MudButton>

        @if (_hasValidation)
        {
            <MudAlert Severity="Severity.Warning" Class="mt-3">.NET Dev ID is Empty.</MudAlert>
        }
    </MudItem>
</MudGrid>

<MudGrid Class="mt-5">
    @if (_badges is not null && _badges.Count > 0)
    {
        @foreach(Badge badge in _badges)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5"><b>@badge.Size.ToUpper()</b></MudText>
                <MudGrid Class="mt-5">
                    <MudItem xs="4">
                        <MudImage Src="@badge.URL" />
                    </MudItem>
                    <MudItem xs="8">
                        <MudExpansionPanels MultiExpansion="true">
                            <MudExpansionPanel Text="HTML" MaxHeight="150">
                                <pre>
                                    <code>@badge.HTML</code>
                                </pre>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="MarkDown" MaxHeight="500">
                                <pre>
                                    <code>@badge.Markdown</code>
                                </pre>
                            </MudExpansionPanel>
                        </MudExpansionPanels> 
                    </MudItem>
                </MudGrid>
            </MudItem>
        }        
    } 
</MudGrid>

@code
{
    private record Badge(string URL, string HTML, string Markdown, string Size);

    private string _id = string.Empty;

    private string _theme = "Light";

    private List<Badge>? _badges;

    private string[] _sizes = new[] { "small", "medium" };

    private bool _hasValidation = false;

    private void OnGenerateBadge(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(_id))
        {
            _hasValidation = true;
            return;
        }

        _badges = new List<Badge>(_sizes.Length);

        foreach (var size in _sizes)
        {
            string url = $"https://profile.dotnetdev-badge.kr/api/v1/badge/{size}?id={_id}&theme={_theme}";

            string html = $@"
<a href=""https://forum.dotnetdev.kr/u/{_id}/summary"">
    <img src=""https://profile.dotnetdev-badge.kr/api/v1/badge/small?id={_id}&theme={_theme}"" />
</a>
";
            string markdown = $"[![dotnetdev](https://profile.dotnetdev-badge.kr/api/v1/badge/small?id={_id}&theme={_theme})](https://forum.dotnetdev.kr/u/{_id}/summary)";

            _badges.Add(new(url, html, markdown, size));
        }

        _hasValidation = false;
    }
}